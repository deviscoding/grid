@import "grid-variables";
@import "deviscoding/responsive/scss/rwd-mixins";

// region ///////////////////////////////////////////////////////////////   Flex Mixins

@mixin row-reverse() {
  flex-direction: row-reverse;
  flex-wrap: wrap-reverse
}

@mixin col-reverse() {
  flex-direction: column-reverse;
  flex-wrap: wrap-reverse
}

@mixin make-column($class, $col-number) {
  .col-#{$class}-#{$col-number} {
    flex-basis: (100% / $grid-columns) * $col-number;
    max-width: ((100% / $grid-columns) * $col-number);
  }
}

@mixin make-cols($class) {
  @for $i from 1 through $grid-columns {
    @include make-column($class,$i);
  }
}

@mixin make-offset($class, $col-number) {
  .col-#{$class}-offset-#{$col-number} {
    margin-left: ((100% / $grid-columns) * $col-number);
  }
}

@mixin make-offsets($class, $col-number: ($grid-columns - 1)) {
  @if $col-number > 0 {
    @include make-offsets($class, ($col-number - 1));
    @include make-offset($class, $col-number);
  } @else {
    .col-#{$class}-offset-#{$col-number} {
      margin-left: 0;
    }
  }
}

@mixin make-grid-flexbox-adjustments($bp) {
  $infix: -#{$bp};
  [class*="col-#{$bp}-"]  {
    &.flex#{$infix}-grow {
      // While max-width: none; makes logical sense here, we're using 100% to work around a FlexBox bug in IE10/11
      // https://github.com/philipwalton/flexbugs#2-column-flex-items-set-to-align-itemscenter-overflow-their-container
      max-width: 100%;
      flex-grow: 1 !important;
    }
    &.flex#{$infix}-shrink {
      // We are using flex-basis: auto/flex-shrink: 0 here instead of flex-shrink: 1 because of a Safari Bug
      // We aren't combining into a flex: 0 0 auto !important; because of an IE10 bug
      // https://github.com/philipwalton/flexbugs#1-minimum-content-sizing-of-flex-items-not-honored
      // https://bugs.webkit.org/show_bug.cgi?id=146020
      // https://github.com/philipwalton/flexbugs#13-importance-is-ignored-on-flex-basis-when-using-flex-shorthand
      flex-shrink: 0 !important;
      flex-basis: auto !important;
      width: auto;
    }
  }
}

@mixin make-grid-column-base($bkps, $columns, $gutter) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    min-height: 1px; // Prevent columns from collapsing when empty
    padding-right: $gutter / 2;
    padding-left:  $gutter / 2;
    flex-direction: column;
  }

  @each $breakpoint in map-keys($bkps) {
    $infix: "-#{$breakpoint}";

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }

    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }
  }
}

@mixin make-flex-grid($class) {

  .col-#{$class} {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
  }

  .col-#{$class}-auto {
    flex: 0 0 auto;
  }

  @include make-cols($class);
  @include make-offsets($class);
}

@mixin make-multi-column($viewport-size) {
  @if $viewport-size == xs {
    .row > .columns {
      padding-left: $half-gutter-width;
      padding-right: $half-gutter-width;
    }
  }
  .columns {
    @if $viewport-size == xs {
      column-count:  $column-xs-count;
      column-gap:    $column-xs-gap;
      padding:       0;
      width:         100%;
      margin-bottom: 0;
      [class*="col-"] {
        max-width: none;
        flex-basis: auto;
        padding-left: 0;
        padding-right: 0;
      }
    }
    @if $viewport-size == sm {
      @if ($column-sm-count != $column-xs-count) { column-count: $column-sm-count; }
      @if ($column-sm-gap != $column-xs-gap) { column-gap: $column-sm-gap; }
    }
    @if $viewport-size == md {
      @if ($column-count != $column-sm-count) { column-count: $column-count; }
      @if ($column-gap != $column-sm-gap) { column-gap: $column-gap; }
    }
    @if $viewport-size == lg {
      @if ($column-count != $column-lg-count) { column-count: $column-lg-count; }
      @if ($column-gap != $column-lg-gap) { column-gap: $column-lg-gap; }
    }
    @if $viewport-size == xl {
      @if ($column-lg-count != $column-xl-count) { column-count: $column-xl-count; }
      @if ($column-lg-gap != $column-xl-gap) { column-gap: $column-xl-gap; }
    }
  }
}

@mixin grid-responsive($bp) {
  @if $bp != xs {
    .container-#{$bp} {
      max-width: container($bp);
    }
  }
  @if feature(grid) {
    // Flexbox Grid
    @include make-flex-grid($bp);
    // Multi-Column
    @include make-multi-column($bp);
    // Flexbox Adjustment Classes
    @include make-grid-flexbox-adjustments($bp);
  }
}

// endregion ////////////////////////////////////////////////////////////   End Flex Mixins